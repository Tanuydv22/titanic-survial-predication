# -*- coding: utf-8 -*-
"""Copy of Titanic survial predication using machine learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GP9LsDekdKJUsuNrUOT-QvvEaSPRZIuo

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import accuracy_score

"""Data colllection & prepcessing"""

# load the data from csv file to pandas dataframe
titanic_data = pd.read_csv('/train.csv')

# printing the first 5 rows of the dataframe
titanic_data.head()

# number of rows and colunms
titanic_data.shape

# getting information about the data
titanic_data.info()

# check the number of missing values in each column
titanic_data.isnull().sum()

"""Handling the missing value"""

# drop the "Cabin " column from the dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis=1)

# replacing the missing values in "Age" co;umn with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

# finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())

# replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

# check the number of missing values in each column
titanic_data.isnull().sum()

"""Data Analysis"""

# getting some statistical measure about the data
titanic_data.describe()

# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data visualization"""

sns.set()

# making a count plot for "Survived" column
sns.countplot(x='Survived', data=titanic_data)

titanic_data['Sex'].value_counts()

# making a count plot for "Sex" column
sns.countplot(x='Sex', data=titanic_data)

# number of survivors Gender wise
sns.countplot(x='Sex', hue='Survived', data=titanic_data)

# making a count plot for "Pclass" column
sns.countplot(x='Pclass', data=titanic_data)

sns.countplot(x='Pclass', hue='Survived', data=titanic_data)

"""Encoding the Categorical Columns

"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

# converting categorical columns
titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""Separating features & Target"""

X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
Y = titanic_data['Survived']

print(X)

print(Y)

"""Spliting the data into training data & Test data"""

X train, X test, Y train, Y test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Spliting the data into training data & Test data
# corrected variable names to use underscores instead of spaces
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

# Model Training
# Logistic Regression
# Ensure this cell is run before the next cell that uses 'model'
model = LogisticRegression()

# training the logistic Rgression model with training data
# This cell requires the 'model' variable to be defined
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# Model Training
# Logistic Regression
# Ensure this cell is run before the next cell that uses 'model'
model = LogisticRegression()

# training the logistic Rgression model with training data
# This cell requires the 'model' variable to be defined
model.fit(X_train, Y_train)

# Model Training
# Logistic Regression
# Ensure this cell is run before the next cell that uses 'model'
model = LogisticRegression()

# training the logistic Rgression model with training data
# This cell requires the 'model' variable to be defined
model.fit(X_train, Y_train)

# Make predictions on the training data and store them in X_train_prediction
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
 print('Accuracy score of training data : ', training_data_accuracy)

# accuracy on test data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)

# accuracy on test data
# X_train_prediction = model.predict(X_train) # This line was for training data accuracy
# training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
# print('Accuracy score of training data : ', training_data_accuracy)

# Make predictions on the test data
X_test_prediction = model.predict(X_test)

# Calculate accuracy on test data
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)

